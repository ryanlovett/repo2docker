#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# repo2docker documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  2 13:00:51 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

# For conversion from markdown to html
import recommonmark.parser

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# source parser
source_parsers = {
    '.md': 'recommonmark.parser.CommonMarkParser',
}

def setup(app):
    app.add_stylesheet('custom.css')  # may also be an URL

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'repo2docker'
copyright = '2017, Project Jupyter'
author = 'Project Jupyter'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1'
# The full version, including alpha/beta/rc tags.
release = '0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Jupyter Logo
html_logo = '_static/images/logo.svg'
html_favicon = '_static/images/favicon.ico'

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'repo2dockerdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'repo2docker.tex', 'repo2docker Documentation',
     'Project Jupyter', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'repo2docker', 'repo2docker Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'repo2docker', 'repo2docker Documentation',
     author, 'repo2docker', 'One line description of project.',
     'Miscellaneous'),
]



# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# Build the repo2docker test syntax
import os
s = ''
FILE_ORDER_PREFERENCE = ['System', 'Python', 'Julia', 'Docker', 'Misc']
SKIP_FOLDERS = ['binder-dir']
FILES_DICT = {ii: [] for ii in FILE_ORDER_PREFERENCE}
for root, _, files in os.walk(os.path.join('..', '..', 'tests')):
    depth = len(root.split('/')) - 3
    if 'README.rst' not in files or depth > 2:
        continue
    if any(folder in root for folder in SKIP_FOLDERS):
        continue
    header = files.pop(files.index('README.rst'))
    with open(os.path.join(root, header), 'r') as ff:
        this_s = ff.read() + '\n\n'
        title = this_s.split('\n')[0]
    for ifile in files:
        filename = os.path.basename(ifile)
        if filename == 'verify':
            continue
        with open(os.path.join(root, ifile), 'r') as ff:
            lines = ff.readlines()
        lines = ['   ' + line for line in lines]
        this_s += 'File: ``{}``\n{}\n\n**Contents**::\n\n'.format(
            filename, '~' * (len(filename) + 10))
        this_s += '\n'.join(lines)
        this_s += '\n\n'
        usename = [ii for ii in FILE_ORDER_PREFERENCE if ii in title]
        usename = 'Misc' if len(usename) == 0 else usename[0]
    FILES_DICT[usename].append(this_s)
for key in FILE_ORDER_PREFERENCE:
    for istring in FILES_DICT[key]:
        s += istring
with open('./test_file_text.txt', 'w') as ff:
    ff.write(s)
